#include <iostream>  /*cout and endl*/
#include <stdio.h>
#include <stdlib.h>  /*atof*/
#include <math.h> /*pow*/
#include <cmath> /*abs*/
#include <unistd.h>
#include <time.h>
#include <sys/time.h>

#include "mpi.h"


using namespace std; /*cout*/

extern "C"
{

  double evalfunc(int nodeid, int *expandid1, int *expandid2);

}

int toFind, foundAll,nodeCount,totalNodeCount;
bool pathEnd;
int *queue, *resizeQueue, *solutions, *solnodes, *solpass, *preqQueue;
int queueAllocated, queuecount, solutionCount, preqpos;

int expandid1,expandid2,parentId,requesterId,qnodeId,snodeId;
int expandid11,expandid12;
int expandid21,expandid22;
double nodeStata,nodeStatb;


int main(int argc, char *argv[])
{
  if (argc > 1){
    toFind = atoi(argv[1]);
  }else{
    toFind = -1;
  }
  
  foundAll = 0;
  nodeCount = 0;
  queueAllocated=1000;
  queuecount=0;
  preqpos=-1;
  solutionCount=0;
  queue = (int *)malloc(queueAllocated*sizeof(int ));
  solutions = (int *)malloc(queueAllocated*sizeof(int ));
  solnodes = (int *)malloc(queueAllocated*sizeof(int ));
  solpass = (int *)malloc(2*sizeof(int));
  queue[0]=0;

  int i, rc, myrank, otherrank, numranks,tag1;//,status;
  MPI_Status status1, status2, status3, status4;
  MPI_Request req1, req2, req3, req4;
  int flag1,flag2,flag3,flag4;

  rc = MPI_Init(&argc,&argv);
  rc = MPI_Comm_size(MPI_COMM_WORLD,&numranks);
  rc = MPI_Comm_rank(MPI_COMM_WORLD,&myrank);
  preqQueue = (int *)malloc(numranks*sizeof(int ));
  parentId=-1;
  if(myrank !=1)
    first_time=0;
  else if(myrank == 1)
    nodeStata = evalfunc(parentId, &expandid1, &expandid2);
      
  
  if(myrank!=0){
    MPI_Irecv(&foundAll,1,MPI_INT,0,3,MPI_COMM_WORLD,&req4);
      
    while(!foundAll){
      /*
       * Request Parent 0
       */
      parentId=-1;
      MPI_Send(&myrank,1,MPI_INT,0,0,MPI_COMM_WORLD);
      MPI_Irecv(&parentId,1,MPI_INT,0,0,MPI_COMM_WORLD,&req1);
      flag1=0;
      do{
	MPI_Test(&req1,&flag1,&status1);
	MPI_Test(&req4,&foundAll,&status1);
      }while(!flag1 && !foundAll);
    
      if(foundAll){
	do{
	  MPI_Test(&req1,&flag1,&status1);
	}while(!flag1);
    
	break;
      }
      //parentId=-1;
      if (parentId==-1){
	do{
	  MPI_Test(&req4,&foundAll,&status1);
	}while(!foundAll);
    
	break;
      }
      nodeStata = evalfunc(parentId, &expandid1, &expandid2);
      nodeCount++;
      if(nodeStata>1.0){
  	/*
  	 * IS SOLUTION
  	 */
	solpass[0]=parentId;
	solpass[1]=nodeStata;
	MPI_Send(solpass,2,MPI_INT,0,2,MPI_COMM_WORLD);
	    
      }
      pathEnd=false;
      while(!pathEnd&&!foundAll){
	MPI_Test(&req4,&foundAll,&status1);
	if(foundAll){
	  break;
	}
	if(expandid1<0 && expandid2<0){
	  break;
  	}else if(expandid1<0){
  	  nodeStatb = evalfunc(expandid2, &expandid21, &expandid22);
	  nodeCount++;
	  if(nodeStatb>1.0){
  	    /*
  	     * IS SOLUTION
  	     */
	    solpass[0]=expandid2;
	    solpass[1]=nodeStatb;
	    MPI_Send(solpass,2,MPI_INT,0,2,MPI_COMM_WORLD);
	    
  	  }
  	  expandid1=expandid21;
  	  expandid2=expandid22;
  	  continue;
  	}else if(expandid2<0){
  	  nodeStata = evalfunc(expandid1, &expandid11, &expandid12);
	  nodeCount++;
	  if(nodeStata>1.0){
  	    /*
  	     * IS SOLUTION
  	     */
	    solpass[0]=expandid1;
	    solpass[1]=nodeStata;
	    MPI_Send(solpass,2,MPI_INT,0,2,MPI_COMM_WORLD);
	    
  	  }
  	  expandid1=expandid11;
  	  expandid2=expandid12;
  	  continue;
  	}else{
	  nodeStata = evalfunc(expandid1, &expandid11, &expandid12);
	  nodeCount++;
  	  nodeStatb = evalfunc(expandid2, &expandid21, &expandid22);
	  nodeCount++;
  	  if(nodeStata>1.0){
  	    /*
  	     * IS SOLUTION
  	     */
	    solpass[0]=expandid1;
	    solpass[1]=nodeStata;
	    MPI_Send(solpass,2,MPI_INT,0,2,MPI_COMM_WORLD);
	    
  	  }
  	  if(nodeStatb>1.0){
  	    /*
  	     * IS SOLUTION
  	     */
	    solpass[0]=expandid2;
	    solpass[1]=nodeStatb;
	    MPI_Send(solpass,2,MPI_INT,0,2,MPI_COMM_WORLD);
	    
  	  }
  	  if(nodeStata>nodeStatb){
  	    expandid1=expandid11;
  	    expandid2=expandid12;
  	    if(expandid21>=0){
  	      /*
  	       * ADD TO QUEUE
  	       */
	      MPI_Send(&expandid21,1,MPI_INT,0,1,MPI_COMM_WORLD);
      
  	    }
  	    if(expandid22>=0){
  	      /*
  	       * ADD TO QUEUE
  	       */
	      MPI_Send(&expandid22,1,MPI_INT,0,1,MPI_COMM_WORLD);
      
  	  
  	    }
  	    
  	  
  	  }else{
  	    expandid1=expandid21;
  	    expandid2=expandid22;
  	    if(expandid11>=0){
  	      /*
  	       * ADD TO QUEUE
  	       */
	      MPI_Send(&expandid11,1,MPI_INT,0,1,MPI_COMM_WORLD);
      
  	    }
  	    if(expandid12>=0){
  	      /*
  	       * ADD TO QUEUE
  	       */
	      MPI_Send(&expandid12,1,MPI_INT,0,1,MPI_COMM_WORLD);
      
  	    }
  	  }
  	}
      
      }
    }

    if(myrank==1){
      myrank = -1;
      solpass[0]=-1;
      solpass[1]=-1;
      	    
      MPI_Send(&myrank,1,MPI_INT,0,0,MPI_COMM_WORLD);
      MPI_Send(&myrank,1,MPI_INT,0,1,MPI_COMM_WORLD);
      MPI_Send(solpass,2,MPI_INT,0,2,MPI_COMM_WORLD);
    }
    
    MPI_Reduce(&nodeCount, &totalNodeCount, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    
  }else{
    MPI_Irecv(&requesterId,1,MPI_INT,MPI_ANY_SOURCE,0, MPI_COMM_WORLD,&req1); //Parent Request 0
    MPI_Irecv(&qnodeId,1,MPI_INT,MPI_ANY_SOURCE,1, MPI_COMM_WORLD,&req2); //Add to Queue 1
    MPI_Irecv(solpass,2,MPI_INT,MPI_ANY_SOURCE,2, MPI_COMM_WORLD,&req3); //solution 2
    bool bpreq=false, badd=false,bsol=false;  
    flag1=0;
    flag2=0;
    flag3=0;
    while(!bpreq || !badd || !bsol){
      MPI_Test(&req1,&flag1,&status1);
      MPI_Test(&req2,&flag2,&status2);
      MPI_Test(&req3,&flag3,&status3);
      if(flag1){
	if (requesterId == -1){
	  bpreq=true;
	}else{
	  
	  if(queuecount>=0){
	    
	    MPI_Send(&queue[queuecount],1,MPI_INT,requesterId,0,MPI_COMM_WORLD);
	    
	    //break;      
	    queuecount--;
	  }else{
	    preqpos+=1;
	    preqQueue[preqpos] = requesterId;
	    
	    //preqpos is position/index in queue for numranks-1 ranks (excludes 0)
	    if(preqpos+1==numranks-1){ //if all ranks are waiting on something from queue
	      foundAll=1;
	      parentId=-1;
	      for (int i=1; i<numranks; i++){
		
		MPI_Send(&foundAll,1,MPI_INT,i,3,MPI_COMM_WORLD);
		MPI_Send(&parentId,1,MPI_INT,i,0,MPI_COMM_WORLD);
	    
	      }
	    }
	  }
	  //foundAll=1;
	  
	}
	flag1=0;
	MPI_Irecv(&requesterId,1,MPI_INT,MPI_ANY_SOURCE,0, MPI_COMM_WORLD,&req1); //Parent Request 0
	    
      }
      if(flag2){
	if (qnodeId == -1){
	  badd=true;
	}else{
	  queuecount++;
	  queue[queuecount]=qnodeId;
	  
	}
	flag2=0;
	MPI_Irecv(&qnodeId,1,MPI_INT,MPI_ANY_SOURCE,1, MPI_COMM_WORLD,&req2); //Add to Queue 1

      }
      if(flag3){
	if (solpass[0] == -1){
	  bsol=true;
	}else{
	  solutions[solutionCount]=solpass[0];
	  solnodes[solutionCount]=solpass[1];
	  solutionCount++;
	  if(solutionCount==toFind){ 
	      foundAll=1;
	      for (int i=1; i<numranks; i++){
		
		MPI_Send(&foundAll,1,MPI_INT,i,3,MPI_COMM_WORLD);
	    
	      }
	      parentId=-1;
	      while(preqpos>=0){
	//preqQueue[preqpos] == snodeId;
		MPI_Send(&parentId,1,MPI_INT,preqQueue[preqpos],0,MPI_COMM_WORLD);	          
		preqpos--;    

	      }
	  }
	  
	}
	flag3=0;
	MPI_Irecv(solpass,2,MPI_INT,MPI_ANY_SOURCE,2, MPI_COMM_WORLD,&req3); //solution 2
    
      }

      while(queuecount>=0 && preqpos>=0){
	//preqQueue[preqpos] == otherrank;
	
	MPI_Send(&queue[queuecount],1,MPI_INT,preqQueue[preqpos],0,MPI_COMM_WORLD);
	          
	queuecount--;
	preqpos--;
	     

      }

      
    }
    MPI_Reduce(&nodeCount, &totalNodeCount, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    printf("NodeId, Value\n");
    for(int i=0; i<solutionCount;i++){
      printf("%d, %d\n",solutions[i],solnodes[i]);
    }
    printf("A total of %d nodes were searched\n",totalNodeCount);
    printf("A totl of %d solutions were found.\n",solutionCount);
  
  }
  
  MPI_Finalize();

  return 0;


}
